cmake_minimum_required(VERSION 3.25.1)
if(WIN32)
  include(${CMAKE_SOURCE_DIR}/envWindows.cmake)
  message(STATUS "WINDOWS ENVIRONMENT")
elseif(UNIX)
  include(${CMAKE_SOURCE_DIR}/envLinux.cmake)
  message(STATUS "LINUX ENVIRONMENT")
endif()


set(NAME First_App)

message(STATUS "using ${CMAKE_GENERATOR} for build ") 
if (CMAKE_GENERATOR STREQUAL "MinGW Makefiles")
    if (NOT MINGW_PATH) 
      message(FATAL_ERROR "MINGW_PATH not set in .env.cmake")
    endif()
    set(USE_MINGW "True")
    set(CMAKE_C_COMPILER ${MINGW_PATH}/bin/gcc.exe)
    set(CMAKE_CXX_COMPILER  ${MINGW_PATH}/bin/g++.exe)
  else()
    set(USE_MINGW "False")
    set(CMAKE_C_COMPILER "cl")
    set(CMAKE_CXX_COMPILER "cl")
    message(STATUS "Using Visual Studio compiler")

endif()
project(${NAME} VERSION 0.1.0)

include_directories(include)


# 1. Set VULKAN_SDK_PATH in .env.cmake to target specific vulkan version
if (DEFINED VULKAN_SDK_PATH)
  set(Vulkan_INCLUDE_DIRS "${VULKAN_SDK_PATH}/Include") # 1.1 Make sure this include path is correct
  set(Vulkan_LIBRARIES "${VULKAN_SDK_PATH}/Lib") # 1.2 Make sure lib path is correct
  set(Vulkan_FOUND "True")
else()
  find_package(Vulkan REQUIRED) # throws error if could not find Vulkan
  message(STATUS "Found Vulkan: $ENV{VULKAN_SDK}")
endif()
if (NOT Vulkan_FOUND)
	message(FATAL_ERROR "Could not find Vulkan library!")
else()
	message(STATUS "Using vulkan lib at: ${Vulkan_LIBRARIES}")
endif()

# 2. Set GLFW_PATH in .env.cmake to target specific glfw
if (DEFINED GLFW_PATH)
  message(STATUS "Using GLFW path specified in .env")
  set(GLFW_INCLUDE_DIRS "${GLFW_PATH}/include")
  if (MSVC)
    message(STATUS "USING MSVC for GLFW")
    set(GLFW_LIB "${GLFW_PATH}/lib-vc2022")
  elseif (CMAKE_GENERATOR STREQUAL "MinGW Makefiles")
    message(STATUS "USING MINGW")
    set(GLFW_LIB "${GLFW_PATH}/lib-mingw-w64") # 2.1 make sure matches glfw mingw subdirectory
  endif()
else()
  find_package(glfw3 3.4 REQUIRED)
  set(GLFW_LIB glfw)
  message(STATUS "Found GLFW")
endif()
if (NOT GLFW_LIB)
	message(FATAL_ERROR "Could not find glfw library!")

endif()

message(STATUS "ADDING EXTERNAL DEPENDENCIES")
include_directories(external)
message(STATUS "Using external/tinyobjloader")
set(TINYOBJ_PATH external/tinyobjloader)
message(STATUS "Using external/freetype")
set(FREETYPE_PATH external/freetype)
message(STATUS "Using external/irrklang")
set(IRRKLANG_PATH external/irrklang)
message(STATUS "Using external/glm")
set(GLM_PATH external/glm)


#TESTING ----------------------------
message(STATUS "Using external/glfw")
set(GLFW_INCLUDE_DIRS external/glfw/include/GLFW)
set(GLFW_LIB external/glfw/lib-vc2022)
#------------------------------------


file(GLOB_RECURSE SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp)

add_executable(${PROJECT_NAME} ${SOURCES})

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)

set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/build")


#NOTE THIS NEEDS MORE EDITION TO BE BUILD ON WINDOWS, YOU WILL NEED TO CHANGE SOME DIRECORIES
if (WIN32)
  message(STATUS "CREATING BUILD FOR WINDOWS")

  if (USE_MINGW)
    message(STATUS "USING MINGW")
    target_include_directories(${PROJECT_NAME} PUBLIC
      ${MINGW_PATH}/include
    )
    target_link_directories(${PROJECT_NAME} PUBLIC
      ${MINGW_PATH}/lib
    )
  endif()
  if(NOT USE_MINGW)
    message(STATUS "USING VISUAL STUDIO for build")
    target_compile_options(${PROJECT_NAME} PUBLIC /std:c++17)
  endif()
  target_include_directories(${PROJECT_NAME} PUBLIC
    ${PROJECT_SOURCE_DIR}/src
    ${Vulkan_INCLUDE_DIRS}
    ${TINYOBJ_PATH}
    ${FREETYPE_PATH}
    ${IRRKLANG_PATH}
    ${GLFW_INCLUDE_DIRS}
    ${GLM_PATH}
    )
    message(STATUS "VULKAN INCLUDE DIRS: ${Vulkan_INCLUDE_DIRS}")
    message(STATUS "GLFW INCLUDE DIRS: ${GLFW_INCLUDE_DIRS}")
    message(STATUS "GLM INCLUDE DIRS: ${GLM_PATH}")
    message(STATUS "TINYOBJ INCLUDE DIRS: ${TINYOBJ_PATH}")

  target_link_directories(${PROJECT_NAME} PUBLIC
    ${Vulkan_LIBRARIES}
    ${GLFW_LIB}
    
  )
  message(STATUS "VULKAN LIB DIRS: ${Vulkan_LIBRARIES}")
  message(STATUS "GLFW LIB DIRS: ${GLFW_LIB}")

  target_link_libraries(${PROJECT_NAME} ${GLFW_LIB}/glfw3.lib ${Vulkan_LIBRARIES}/vulkan-1)
elseif (UNIX)
    message(STATUS "CREATING BUILD FOR UNIX")
    target_include_directories(${PROJECT_NAME} PUBLIC
      ${PROJECT_SOURCE_DIR}/src
      ${TINYOBJ_PATH}
      ${FREETYPE_PATH}
      ${IRRKLANG_PATH}
    )
    target_link_libraries(${PROJECT_NAME} glfw ${Vulkan_LIBRARIES})
endif()


############## Build SHADERS #######################

# Find all vertex and fragment sources within shaders directory
# taken from VBlancos vulkan tutorial
# https://github.com/vblanco20-1/vulkan-guide/blob/all-chapters/CMakeLists.txt
find_program(GLSL_VALIDATOR glslangValidator HINTS 
  ${Vulkan_GLSLANG_VALIDATOR_EXECUTABLE} 
  /usr/bin 
  /usr/local/bin 
  ${VULKAN_SDK_PATH}/Bin
  ${VULKAN_SDK_PATH}/Bin32
  $ENV{VULKAN_SDK}/Bin/ 
  $ENV{VULKAN_SDK}/Bin32/
)

# get all .vert and .frag files in shaders directory
file(GLOB_RECURSE GLSL_SOURCE_FILES
  "${PROJECT_SOURCE_DIR}/data/shaders/*.frag"
  "${PROJECT_SOURCE_DIR}/data/shaders/*.vert"
)
file(MAKE_DIRECTORY "${PROJECT_SOURCE_DIR}/build/shaders")

foreach(GLSL ${GLSL_SOURCE_FILES})
  get_filename_component(FILE_NAME ${GLSL} NAME)
  set(SPIRV "${PROJECT_SOURCE_DIR}/build/shaders/${FILE_NAME}.spv")
  add_custom_command(
    OUTPUT ${SPIRV}
    COMMAND ${GLSL_VALIDATOR} -V ${GLSL} -o ${SPIRV}
    DEPENDS ${GLSL})
  list(APPEND SPIRV_BINARY_FILES ${SPIRV})
endforeach(GLSL)

add_custom_target(
    Shaders
    DEPENDS ${SPIRV_BINARY_FILES}
)
message(STATUS "---------Successfully built-----------")